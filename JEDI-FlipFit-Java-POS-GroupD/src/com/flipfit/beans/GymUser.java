// File: com.flipfit.beans.GymUser.java
package com.flipfit.beans;

import java.util.HashSet;
import java.util.Set;
import java.util.Collections; // For unmodifiable set, good practice
import java.util.stream.Collectors; // For more elegant toString() for roles

public class GymUser {
  private long userId;
  private String name;
  private String email;
  private String password;
  private Set<Role> roles = new HashSet<>(); // Initialize here to avoid NullPointerException

  public void addRole(Role role){
    if (role != null) {
      roles.add(role);
    }
  }

  // Constructor with ID and a single initial Role
  public GymUser(long userId, String name, String email, String password, Role initialRole) {
    this.userId = userId;
    this.name = name;
    this.email = email;
    this.password = password;
    if (initialRole != null) {
      this.roles.add(initialRole);
    }
  }

  // Constructor with ID and a Set of initial Roles
  public GymUser(long userId, String name, String email, String password, Set<Role> initialRoles) {
    this.userId = userId;
    this.name = name;
    this.email = email;
    this.password = password;
    if (initialRoles != null) {
      this.roles.addAll(initialRoles);
    }
  }

  // Constructor without ID but with a single initial Role (ID will be generated by DAO)
  public GymUser(String name, String email, String password, Role initialRole) {
    this.name = name;
    this.email = email;
    this.password = password;
    if (initialRole != null) {
      this.roles.add(initialRole);
    }
  }

  // Existing constructor without roles (consider if this is still needed)
  public GymUser(String name, String email, String password) {
    this.name = name;
    this.email = email;
    this.password = password;
  }

  public GymUser() {} // Keep default constructor

  public long getUserId() {
    return userId;
  }

  public void setUserId(long userId) {
    this.userId = userId;
  }

  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public Set<Role> getRole() { // Changed to plural "roles" for clarity
    return Collections.unmodifiableSet(roles); // Return unmodifiable set to prevent external modification
  }

  public void setRoles(Set<Role> roles) { // Changed to plural "roles" for clarity
    this.roles.clear();
    if (roles != null) {
      this.roles.addAll(roles);
    }
  }

  // Convenience method to check if a user has a specific role
  public boolean hasRole(String roleName) {
    return this.roles.stream().anyMatch(r -> r.getRoleName().equalsIgnoreCase(roleName));
  }


  @Override
  public String toString() {
    // Format roles for better readability using roleName
    String roleNames = roles.stream()
            .map(Role::getRoleName) // Use getRoleName from Role object
            .collect(Collectors.joining(", "));

    return "GymUser{" +
            "userId=" + userId +
            ", name='" + name + '\'' +
            ", email='" + email + '\'' +
            ", password='" + (password != null ? "[PROTECTED]" : null) + '\'' +
            ", roles=[" + roleNames + "]" +
            '}';
  }
}